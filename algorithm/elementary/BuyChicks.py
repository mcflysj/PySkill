"""
题目：百钱百鸡

问题描述：
中国古代数学家张丘建在他的《算经》中提出了一个著名的“百钱百鸡问题”:
一只公鸡值五钱，一只母鸡值三钱，三只小鸡值一钱，现在要用百钱买百鸡，请问公鸡、母鸡、小鸡各多少只?

算法设计：
设计1:对于不定方程组，我们可以利用穷举循环的方法来解决，也就是通过对未知数可变范围的穷举，验证方程在什么情况下成立，从而得到相应的解。
因公鸡的取值范围是0~20，可用循环语句“for cock in range(0,21);”实现。
钱的数量是固定的，要买的鸡的数量也是固定的， 所以母鸡数量是受到公鸡数量限制的。
同理，小鸡数量受到公鸡和母鸡数量的限制，因此我们可以利用三层循环的嵌套来解决，第一层循环控制公鸡的数量，第二层控制母鸡的数量，最内层控制小鸡的数量。
设计2:以上算法需要穷举尝试21×34×101=72114次，算法的效率显然太低了。对于这类求解不定方程的问题，各层循环的控制变量直接与方程的未知数相关，
并且采用对未知数的取值范围穷举和组合的方法得到全部的解。对于本题来说，公鸡的数量确定后，小鸡的数量就固定为100-cock-hen，无须再进行穷举了，
此时约束条件只有一个，即 5×cock+3×hen+chicken/3=100，这样我们利用两重循环即可求解本题，
此算法只需穷举21×34=714次，实现时约束条件又限定chicken能被3整除时才会判断“5×cock+3×hen+chicken/3.0=100”，
这样便省去了chicken不能整除3时的算术计算和条件判断，进一步提高了算法的效率。
"""

if __name__=="__main__":
    # 外层循环控制公鸡数量取整范围为0~20
    cock = 0
    while cock <= 20:
        # 内层循环控制母鸡数量取值范围为0~30
        hen = 0
        while hen <= 33:
            # 小鸡的数量
            chicken = 100 - cock - hen
            if 5 * cock + 3 * hen + chicken / 3.0 == 100:
                print("cock=%2d,hen=%2d,chicken=%2d\n" %(cock, hen, chicken))
            hen+=1
        cock+=1